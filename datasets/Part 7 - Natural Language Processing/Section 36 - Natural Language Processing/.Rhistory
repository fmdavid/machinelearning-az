print("Hello world!")
setwd("~/")
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
setwd("~/")
setwd("D:/cursos/MachineLearning/machinelearning-az/datasets/Part 7 - Natural Language Processing/Section 36 - Natural Language Processing")
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
install.packages("tm")
install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
View(corpus)
View(corpus)
as.character(corpus[[1]])
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
View(dtm)
View(dtm)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar el Random Forest con el conjunto de entrenamiento.
#install.packages("randomForest")
library(randomForest)
classifier = randomForest(x = training_set[,-692],
y = training_set$Liked,
ntree = 10)
# PredicciÃ³n de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692])
# Crear la matriz de confusiÃ³n
cm = table(testing_set[, 692], y_pred)
cm
load("D:/cursos/MachineLearning/machinelearning-az/datasets/Part 3 - Classification/Section 14 - Logistic Regression/logistic_regression.R")
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
# install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificaciÃ³n como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
classifier = glm(formula = Liked ~ .,
data = training_set,
family = binomial)
prob_pred = predict(classifier, type = "response",
newdata = testing_set[,-692])
y_pred = ifelse(prob_pred> 0.5, 1, 0)
cm = table(testing_set[, 692], y_pred)
cm
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
# install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificaciÃ³n como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
library(class)
y_pred = knn(train = training_set[,-692],
test = testing_set[,-692],
cl = training_set[,692],
k = 5)
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
cm
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
# install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificaciÃ³n como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
library(e1071)
classifier = svm(formula = Liked ~ .,
data = training_set,
type = "C-classification",
kernel = "radial")
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692])
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
cm
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
# install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificaciÃ³n como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
library(e1071)
classifier = naiveBayes(x = training_set[,-692],
y = training_set$Liked)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692])
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
cm
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
# install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificaciÃ³n como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
library(rpart)
classifier = rpart(formula = Purchased ~ .,
data = training_set)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3],
type = "class")
# Crear la matriz de confusión
cm = table(testing_set[, 3], y_pred)
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
# install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificaciÃ³n como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
library(rpart)
classifier = rpart(formula = Liked ~ .,
data = training_set)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = "class")
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
cm
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
# install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificaciÃ³n como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
install.packages('C50')
library('C50')
classifier = C5.0(training_set[,-692], training_set[,692])
y_pred = predict(classifier, newdata = testing_set[,-692],
type = "class")
cm = table(testing_set[, 692], y_pred)
cm
classifier = C5.0(training_set[,-692], training_set[,692], rules = TRUE)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = "class")
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
cm
