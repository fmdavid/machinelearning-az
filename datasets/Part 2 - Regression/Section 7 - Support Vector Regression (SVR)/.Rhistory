print("Hello world!")
setwd("D:/cursos/MachineLearning/machinelearning-az/datasets/Part 2 - Regression/Section 7 - Support Vector Regression (SVR)")
install.packages("e1071")
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
library(e1071)
regression = svm(formula = Salary ~ .,
data = dataset,
type = "eps-regression",
kernel = "radial")
# PredicciÃ³n de nuevos resultados con SVR
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("PredicciÃ³n (SVR)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
install.packages("rpart")
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# training_set = subset(dataset, split == TRUE)
# testing_set = subset(dataset, split == FALSE)
# Escalado de valores
# training_set[,2:3] = scale(training_set[,2:3])
# testing_set[,2:3] = scale(testing_set[,2:3])
# Ajustar Modelo de RegresiÃ³n con el Conjunto de Datos
# install.packages("rpart")
library(rpart)
regression = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
# PredicciÃ³n de nuevos resultados con Ãrbol RegresiÃ³n
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# VisualizaciÃ³n del modelo de Ã¡rbol de regresiÃ³n
# install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(regression,
newdata = data.frame(Level = x_grid))),
color = "blue") +
ggtitle("PredicciÃ³n con Ãrbol de DecisiÃ³n (Modelo de RegresiÃ³n)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
install.packages("randomForest")
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# training_set = subset(dataset, split == TRUE)
# testing_set = subset(dataset, split == FALSE)
# Escalado de valores
# training_set[,2:3] = scale(training_set[,2:3])
# testing_set[,2:3] = scale(testing_set[,2:3])
# Ajustar Modelo de Random Forest con el Conjunto de Datos
# install.packages("randomForest")
library(randomForest)
set.seed(1234)
dataset[1]
dataset$Level
class(dataset[1])
class(dataset$Level)
regression = randomForest(x = dataset[1], # DFM pide un data frame
y = dataset$Salary,
ntree = 500)
# PredicciÃ³n de nuevos resultados con RegresiÃ³n
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# VisualizaciÃ³n del modelo de Random Forest
# install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(regression,
newdata = data.frame(Level = x_grid))),
color = "blue") +
ggtitle("PredicciÃ³n (Random Forest)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
